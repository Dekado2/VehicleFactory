/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.Reports;

import java.awt.event.KeyEvent;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import model.HourlyEmployee;
import view.InputCheck;
import view.UserMenu;
import view.ViewLogic;

/**
 *
 *
 */
public class GetAllHourlyEmployeesWithShiftsAndSlots extends javax.swing.JInternalFrame {
    private static ViewLogic view;
    private String id;
    private Calendar cal;
    private UserMenu um;
    /**
     * Creates new form GetAllWarehousesInManufacturerCountry
     */
    public GetAllHourlyEmployeesWithShiftsAndSlots() {
        initComponents();
        view=ViewLogic.getInstance();
        ClearTableRows();
        ClearTableRowsShiftsSlots();
        view.GetAllHourlyEmployeesWithShiftsAndSlotsQueryRun(smTable,workersTable,tableLayeredPane,smLayeredPane,workerLayeredPane,shiftsLayeredPane,slotsLayeredPane,um.getLanguageComboBox());
    }

    public GetAllHourlyEmployeesWithShiftsAndSlots(UserMenu um) {
        initComponents();
        view=ViewLogic.getInstance();
        ClearTableRows();
        ClearTableRowsShiftsSlots();
        view.GetAllHourlyEmployeesWithShiftsAndSlotsQueryRun(smTable,workersTable,tableLayeredPane,smLayeredPane,workerLayeredPane,shiftsLayeredPane,slotsLayeredPane,um.getLanguageComboBox());
        this.um=um;
        languageOpening();
         um.getLanguageComboBox().addActionListener(new java.awt.event.ActionListener(){
         public void actionPerformed(java.awt.event.ActionEvent evt) {
             languageActionPerformed(evt);
         }
  });
          
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the
     * Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tableLayeredPane = new javax.swing.JLayeredPane();
        smLayeredPane = new javax.swing.JLayeredPane();
        smLabel = new javax.swing.JLabel();
        resTableScrollPane = new javax.swing.JScrollPane();
        smTable = new javax.swing.JTable();
        exportSM = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        workerLayeredPane = new javax.swing.JLayeredPane();
        workersLabel = new javax.swing.JLabel();
        resTableScrollPane1 = new javax.swing.JScrollPane();
        workersTable = new javax.swing.JTable();
        exportWorkers = new javax.swing.JButton();
        slotsLayeredPane = new javax.swing.JLayeredPane();
        resTableScrollPane3 = new javax.swing.JScrollPane();
        slotsTable = new javax.swing.JTable();
        slotsLabel = new javax.swing.JLabel();
        exportSlots = new javax.swing.JButton();
        shiftsLayeredPane = new javax.swing.JLayeredPane();
        resTableScrollPane2 = new javax.swing.JScrollPane();
        shiftsTable = new javax.swing.JTable();
        shiftsLabel = new javax.swing.JLabel();
        exportShifts = new javax.swing.JButton();

        setBackground(new java.awt.Color(235, 255, 255));
        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        smLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        smLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("view/Reports/Bundle"); // NOI18N
        smLabel.setText(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.smLabel.text")); // NOI18N

        smTable.setAutoCreateRowSorter(true);
        smTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Country", "City", "Street", "House Number", "ZIP Code", "Birthday", "Employment Date", "Hourly Wage", "Extra Wage"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        smTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        smTable.getTableHeader().setReorderingAllowed(false);
        resTableScrollPane.setViewportView(smTable);
        smTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                ClearTableRowsShiftsSlots();
                try{
                    id=(String)smTable.getValueAt(smTable.getSelectedRow(), 0);
                    workersTable.getSelectionModel().clearSelection();
                }
                catch (IndexOutOfBoundsException e){
                    ClearTableRowsShiftsSlots();
                }
                view.EmployeeSelectedFromTable(id, shiftsTable);
            }
        });

        exportSM.setText(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSM.text")); // NOI18N
        exportSM.setToolTipText(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSM.toolTipText")); // NOI18N
        exportSM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportSMActionPerformed(evt);
            }
        });

        jLabel1.setText(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.jLabel1.text")); // NOI18N

        smLayeredPane.setLayer(smLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        smLayeredPane.setLayer(resTableScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        smLayeredPane.setLayer(exportSM, javax.swing.JLayeredPane.DEFAULT_LAYER);
        smLayeredPane.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout smLayeredPaneLayout = new javax.swing.GroupLayout(smLayeredPane);
        smLayeredPane.setLayout(smLayeredPaneLayout);
        smLayeredPaneLayout.setHorizontalGroup(
            smLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(smLayeredPaneLayout.createSequentialGroup()
                .addGroup(smLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(smLayeredPaneLayout.createSequentialGroup()
                        .addComponent(exportSM)
                        .addGap(126, 126, 126)
                        .addComponent(smLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(jLabel1))
                    .addComponent(resTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1083, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 53, Short.MAX_VALUE))
        );
        smLayeredPaneLayout.setVerticalGroup(
            smLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(smLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(smLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(smLabel)
                    .addComponent(exportSM)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        workersLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        workersLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        workersLabel.setText(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.workersLabel.text")); // NOI18N

        workersTable.setAutoCreateRowSorter(true);
        workersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Country", "City", "Street", "House Number", "ZIP Code", "Birthday", "Employment Date", "Hourly Wage"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workersTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        workersTable.getTableHeader().setReorderingAllowed(false);
        resTableScrollPane1.setViewportView(workersTable);
        workersTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                ClearTableRowsShiftsSlots();
                try{
                    id=(String)workersTable.getValueAt(workersTable.getSelectedRow(), 0);
                    smTable.getSelectionModel().clearSelection();
                }
                catch (IndexOutOfBoundsException e){
                    ClearTableRowsShiftsSlots();
                }
                view.EmployeeSelectedFromTable(id, shiftsTable);
            }
        });

        exportWorkers.setText(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportWorkers.text")); // NOI18N
        exportWorkers.setToolTipText(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportWorkers.toolTipText")); // NOI18N
        exportWorkers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportWorkersActionPerformed(evt);
            }
        });

        workerLayeredPane.setLayer(workersLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        workerLayeredPane.setLayer(resTableScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        workerLayeredPane.setLayer(exportWorkers, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout workerLayeredPaneLayout = new javax.swing.GroupLayout(workerLayeredPane);
        workerLayeredPane.setLayout(workerLayeredPaneLayout);
        workerLayeredPaneLayout.setHorizontalGroup(
            workerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workerLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(workerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resTableScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1082, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(workerLayeredPaneLayout.createSequentialGroup()
                        .addComponent(exportWorkers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(workersLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        workerLayeredPaneLayout.setVerticalGroup(
            workerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workerLayeredPaneLayout.createSequentialGroup()
                .addGroup(workerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(workersLabel)
                    .addComponent(exportWorkers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resTableScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        slotsTable.setAutoCreateRowSorter(true);
        slotsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Slot Starting Time", "Shift Starting Time", "Shift Manager ID", "Shift Manager Name", "Shift Manager Country", "Shift Manager City", "Shift Manager Street", "Shift Manager House Number", "Shift Manager ZIP Code", "Shift Manager Birthday", "Shift Manager Employment Date", "Hourly Wage", "Extra Wage", "Production Plan Serial Number", "Production Plan Type Serial Number", "Production Plan Type Number of Slots"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        slotsTable.getTableHeader().setReorderingAllowed(false);
        resTableScrollPane3.setViewportView(slotsTable);
        if (slotsTable.getColumnModel().getColumnCount() > 0) {
            slotsTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsTable.columnModel.title0")); // NOI18N
            slotsTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsTable.columnModel.title1")); // NOI18N
            slotsTable.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsTable.columnModel.title2")); // NOI18N
            slotsTable.getColumnModel().getColumn(3).setHeaderValue(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsTable.columnModel.title3")); // NOI18N
            slotsTable.getColumnModel().getColumn(4).setHeaderValue(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsTable.columnModel.title4")); // NOI18N
            slotsTable.getColumnModel().getColumn(5).setHeaderValue(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsTable.columnModel.title5")); // NOI18N
            slotsTable.getColumnModel().getColumn(6).setHeaderValue(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsTable.columnModel.title6")); // NOI18N
            slotsTable.getColumnModel().getColumn(7).setHeaderValue(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsTable.columnModel.title7")); // NOI18N
            slotsTable.getColumnModel().getColumn(8).setHeaderValue(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsTable.columnModel.title8")); // NOI18N
            slotsTable.getColumnModel().getColumn(9).setHeaderValue(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsTable.columnModel.title9")); // NOI18N
            slotsTable.getColumnModel().getColumn(10).setHeaderValue(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsTable.columnModel.title10")); // NOI18N
            slotsTable.getColumnModel().getColumn(11).setHeaderValue(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsTable.columnModel.title11")); // NOI18N
            slotsTable.getColumnModel().getColumn(12).setHeaderValue(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsTable.columnModel.title12")); // NOI18N
            slotsTable.getColumnModel().getColumn(13).setHeaderValue(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsTable.columnModel.title13")); // NOI18N
            slotsTable.getColumnModel().getColumn(14).setHeaderValue(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsTable.columnModel.title14")); // NOI18N
            slotsTable.getColumnModel().getColumn(15).setHeaderValue(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsTable.columnModel.title15")); // NOI18N
        }

        slotsLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        slotsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        slotsLabel.setText(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsLabel.text")); // NOI18N

        exportSlots.setText(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSlots.text")); // NOI18N
        exportSlots.setToolTipText(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSlots.toolTipText")); // NOI18N
        exportSlots.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportSlotsActionPerformed(evt);
            }
        });

        slotsLayeredPane.setLayer(resTableScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        slotsLayeredPane.setLayer(slotsLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        slotsLayeredPane.setLayer(exportSlots, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout slotsLayeredPaneLayout = new javax.swing.GroupLayout(slotsLayeredPane);
        slotsLayeredPane.setLayout(slotsLayeredPaneLayout);
        slotsLayeredPaneLayout.setHorizontalGroup(
            slotsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, slotsLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exportSlots)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(slotsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 757, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, slotsLayeredPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resTableScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1079, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
        );
        slotsLayeredPaneLayout.setVerticalGroup(
            slotsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slotsLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(slotsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(slotsLabel)
                    .addComponent(exportSlots))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resTableScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        shiftsTable.setAutoCreateRowSorter(true);
        shiftsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Starting Time", "Shift Manager ID", "Shift Manager Name", "Shift Manager Country", "Shift Manager City", "Shift Manager Street", "House Number", "ZIP Code", "Shift Manager Birthday", "Shift Manager Employment Date", "Hourly Wage", "Extra Wage"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        shiftsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        shiftsTable.getTableHeader().setReorderingAllowed(false);
        resTableScrollPane2.setViewportView(shiftsTable);
        shiftsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                ClearTableRowsSlots();
                try{
                    String str=shiftsTable.getValueAt(shiftsTable.getSelectedRow(), 0).toString();
                    Date d=InputCheck.TryConvertingStringtoDateTwo(str);
                    cal=InputCheck.CalendarGetTimeDate(d);
                }
                catch (IndexOutOfBoundsException e){
                    ClearTableRowsSlots();
                }
                view.ShiftSelectedFromTable(id, cal,slotsTable);
            }
        });

        shiftsLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        shiftsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        shiftsLabel.setText(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.shiftsLabel.text")); // NOI18N

        exportShifts.setText(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportShifts.text")); // NOI18N
        exportShifts.setToolTipText(bundle.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportShifts.toolTipText")); // NOI18N
        exportShifts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportShiftsActionPerformed(evt);
            }
        });

        shiftsLayeredPane.setLayer(resTableScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        shiftsLayeredPane.setLayer(shiftsLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        shiftsLayeredPane.setLayer(exportShifts, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout shiftsLayeredPaneLayout = new javax.swing.GroupLayout(shiftsLayeredPane);
        shiftsLayeredPane.setLayout(shiftsLayeredPaneLayout);
        shiftsLayeredPaneLayout.setHorizontalGroup(
            shiftsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shiftsLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(shiftsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resTableScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1083, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(shiftsLayeredPaneLayout.createSequentialGroup()
                        .addComponent(exportShifts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shiftsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 709, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 39, Short.MAX_VALUE))
        );
        shiftsLayeredPaneLayout.setVerticalGroup(
            shiftsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shiftsLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(shiftsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shiftsLabel)
                    .addComponent(exportShifts))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resTableScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tableLayeredPane.setLayer(smLayeredPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tableLayeredPane.setLayer(workerLayeredPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tableLayeredPane.setLayer(slotsLayeredPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tableLayeredPane.setLayer(shiftsLayeredPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout tableLayeredPaneLayout = new javax.swing.GroupLayout(tableLayeredPane);
        tableLayeredPane.setLayout(tableLayeredPaneLayout);
        tableLayeredPaneLayout.setHorizontalGroup(
            tableLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tableLayeredPaneLayout.createSequentialGroup()
                .addGroup(tableLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(shiftsLayeredPane)
                    .addComponent(workerLayeredPane)
                    .addComponent(slotsLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1132, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(tableLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(smLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );
        tableLayeredPaneLayout.setVerticalGroup(
            tableLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tableLayeredPaneLayout.createSequentialGroup()
                .addComponent(smLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(workerLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(shiftsLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(slotsLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableLayeredPane)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tableLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(328, 328, 328))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 788, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exportSMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportSMActionPerformed
         try {
            view.writeCSVfile(smTable, "GetAllEmployeesWithShiftsAndSlots", "ShiftManagers");
            view.ExportSuccess("GetAllEmployeesWithShiftsAndSlots", "ShiftManagers",um.getLanguageComboBox());
        } catch (IOException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        } catch (ClassNotFoundException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        } catch (SQLException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        }
    }//GEN-LAST:event_exportSMActionPerformed

    private void exportWorkersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportWorkersActionPerformed
         try {
            view.writeCSVfile(workersTable, "GetAllEmployeesWithShiftsAndSlots", "Workers");
            view.ExportSuccess("GetAllEmployeesWithShiftsAndSlots", "Workers",um.getLanguageComboBox());
        } catch (IOException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        } catch (ClassNotFoundException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        } catch (SQLException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        }
    }//GEN-LAST:event_exportWorkersActionPerformed

    private void exportShiftsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportShiftsActionPerformed
        if (workersTable.getSelectedRow()!=-1 && smTable.getSelectedRow()==-1){
        try {
            String str=workersTable.getValueAt(workersTable.getSelectedRow(), 0).toString();
            view.writeCSVfile(shiftsTable, "GetAllEmployeesWithShiftsAndSlots", str);
            view.ExportSuccess("GetAllEmployeesWithShiftsAndSlots", str,um.getLanguageComboBox());
        } catch (IOException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        } catch (ClassNotFoundException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        } catch (SQLException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        }
      }
        else if (workersTable.getSelectedRow()==-1 && smTable.getSelectedRow()!=-1)
            try {
            String str=smTable.getValueAt(smTable.getSelectedRow(), 0).toString();
            view.writeCSVfile(shiftsTable, "GetAllEmployeesWithShiftsAndSlots", str);
            view.ExportSuccess("GetAllEmployeesWithShiftsAndSlots", str,um.getLanguageComboBox());
        } catch (IOException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        } catch (ClassNotFoundException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        } catch (SQLException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        }
        else
            view.SelectEmployee(um.getLanguageComboBox());
    }//GEN-LAST:event_exportShiftsActionPerformed

    private void exportSlotsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportSlotsActionPerformed
        if (shiftsTable.getSelectedRow()==-1)
            view.SelectShift(um.getLanguageComboBox());
        else
        {
          try {
            String str=shiftsTable.getValueAt(shiftsTable.getSelectedRow(), 0).toString();
              str=InputCheck.IllegalFileChars(str);
            view.writeCSVfile(slotsTable, "GetAllEmployeesWithShiftsAndSlots", str);
            view.ExportSuccess("GetAllEmployeesWithShiftsAndSlots", str,um.getLanguageComboBox());
        } catch (IOException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        } catch (ClassNotFoundException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        } catch (SQLException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        }  
        }
    }//GEN-LAST:event_exportSlotsActionPerformed

    /**
     * @param args the command line arguments
     */  
private void ClearTableRows()
{
    DefaultTableModel dm = (DefaultTableModel) smTable.getModel();
        int rowCount = dm.getRowCount();
        for (int i=rowCount-1; i>=0 ; i--)
            dm.removeRow(i);
        DefaultTableModel dmTwo = (DefaultTableModel) workersTable.getModel();
        int rowCountTwo = dmTwo.getRowCount();
        for (int i=rowCountTwo-1; i>=0 ; i--)
            dmTwo.removeRow(i);
}
private void ClearTableRowsShiftsSlots()
{
    DefaultTableModel dm = (DefaultTableModel) shiftsTable.getModel();
    DefaultTableModel dmtwo = (DefaultTableModel) slotsTable.getModel();
        int rowCount = dm.getRowCount();
        int rowCounttwo = dmtwo.getRowCount();
        for (int i=rowCount-1; i>=0 ; i--)
            dm.removeRow(i);
        for (int i=rowCounttwo-1;i>=0;i--)
            dmtwo.removeRow(i);
}
private void ClearTableRowsSlots()
{
    DefaultTableModel dmtwo = (DefaultTableModel) slotsTable.getModel();
        int rowCounttwo = dmtwo.getRowCount();
        for (int i=rowCounttwo-1;i>=0;i--)
            dmtwo.removeRow(i);
}
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GetAllHourlyEmployeesWithShiftsAndSlots.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GetAllHourlyEmployeesWithShiftsAndSlots.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GetAllHourlyEmployeesWithShiftsAndSlots.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GetAllHourlyEmployeesWithShiftsAndSlots.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GetAllHourlyEmployeesWithShiftsAndSlots().setVisible(true);
               
            }
        });
    }

  private void languageOpening()
{
    if (um.getLanguageComboBox().getSelectedItem().equals("עברית"))
              {
                  Locale l = new Locale("iw", "IL");
                  ResourceBundle r = ResourceBundle.getBundle("view.Reports/Bundle",l);
                  shiftsLabel.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.shiftsLabel.text"));
                  workersLabel.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.workersLabel.text"));
                  jLabel1.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.jLabel1.text"));
                  exportSlots.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSlots.text"));
                  exportSM.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSM.text"));
                  slotsLabel.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsLabel.text"));
                  smLabel.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.smLabel.text"));
                  exportWorkers.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportWorkers.text"));
                  exportSlots.setToolTipText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSlots.toolTipText"));
                  exportSM.setToolTipText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSM.toolTipText"));
                  exportWorkers.setToolTipText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportWorkers.toolTipText"));
                  exportShifts.setToolTipText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportShifts.toolTipText"));
                  exportShifts.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportShifts.text"));
                  hebTableHeaders();
              }
             else if (um.getLanguageComboBox().getSelectedItem().equals("English") || um.getLanguageComboBox().getSelectedItem().equals("Choose a language"))
              {
                  Locale l = new Locale("en", "US");
                  ResourceBundle r = ResourceBundle.getBundle("view.Reports/Bundle",l);
                  shiftsLabel.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.shiftsLabel.text"));
                  workersLabel.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.workersLabel.text"));
                  jLabel1.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.jLabel1.text"));
                  exportSlots.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSlots.text"));
                  exportSM.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSM.text"));
                  slotsLabel.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsLabel.text"));
                  smLabel.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.smLabel.text"));
                  exportWorkers.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportWorkers.text"));
                  exportSlots.setToolTipText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSlots.toolTipText"));
                  exportSM.setToolTipText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSM.toolTipText"));
                  exportWorkers.setToolTipText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportWorkers.toolTipText"));
                  exportShifts.setToolTipText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportShifts.toolTipText"));
                  exportShifts.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportShifts.text"));
                  engTableHeaders();
              }
}  
  
private void languageActionPerformed(java.awt.event.ActionEvent evt) {  
   if (um.getLanguageComboBox().getSelectedItem().equals("עברית"))
              {
                  Locale l = new Locale("iw", "IL");
                  ResourceBundle r = ResourceBundle.getBundle("view.Reports/Bundle",l);
                  
                  shiftsLabel.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.shiftsLabel.text"));
                  workersLabel.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.workersLabel.text"));
                  jLabel1.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.jLabel1.text"));
                  exportSlots.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSlots.text"));
                  exportSM.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSM.text"));
                  slotsLabel.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsLabel.text"));
                  smLabel.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.smLabel.text"));
                  exportWorkers.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportWorkers.text"));
                  exportSlots.setToolTipText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSlots.toolTipText"));
                  exportSM.setToolTipText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSM.toolTipText"));
                  exportWorkers.setToolTipText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportWorkers.toolTipText"));
                  exportShifts.setToolTipText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportShifts.toolTipText"));
                  exportShifts.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportShifts.text"));
                  hebTableHeaders();
                  ClearTableRows();
                  ClearTableRowsShiftsSlots();
        view.GetAllHourlyEmployeesWithShiftsAndSlotsQueryRun(smTable,workersTable,tableLayeredPane,smLayeredPane,workerLayeredPane,shiftsLayeredPane,slotsLayeredPane,um.getLanguageComboBox());
        slotsTable.setAutoResizeMode(2);
        this.setTitle("השג את כל העובדים השעתיים עם משמרות וסלוטים");
              }
             else if (um.getLanguageComboBox().getSelectedItem().equals("English") || um.getLanguageComboBox().getSelectedItem().equals("Choose a language"))
              {
                  Locale l = new Locale("en", "US");
                  ResourceBundle r = ResourceBundle.getBundle("view.Reports/Bundle",l);
                  shiftsLabel.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.shiftsLabel.text"));
                  workersLabel.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.workersLabel.text"));
                  jLabel1.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.jLabel1.text"));
                  exportSlots.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSlots.text"));
                  exportSM.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSM.text"));
                  slotsLabel.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.slotsLabel.text"));
                  smLabel.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.smLabel.text"));
                  exportWorkers.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportWorkers.text"));
                  exportSlots.setToolTipText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSlots.toolTipText"));
                  exportSM.setToolTipText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportSM.toolTipText"));
                  exportWorkers.setToolTipText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportWorkers.toolTipText"));
                  exportShifts.setToolTipText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportShifts.toolTipText"));
                  exportShifts.setText(r.getString("GetAllHourlyEmployeesWithShiftsAndSlots.exportShifts.text"));
                  engTableHeaders();
                  ClearTableRows();
                  ClearTableRowsShiftsSlots();
        view.GetAllHourlyEmployeesWithShiftsAndSlotsQueryRun(smTable,workersTable,tableLayeredPane,smLayeredPane,workerLayeredPane,shiftsLayeredPane,slotsLayeredPane,um.getLanguageComboBox());
                 slotsTable.setAutoResizeMode(2);
                 this.setTitle("Get All Hourly Employees With Shifts And Slots");
              }
}
  
private void engTableHeaders()
{
    String[]engHeadersSM={"ID","Name","Country","City","Street","House Number","ZIP Code","Birthday","Employment Date","Hourly Wage", "Extra Wage"};
    for (int i=0;i<engHeadersSM.length;i++)
    smTable.getTableHeader().getColumnModel().getColumn(i).setHeaderValue(engHeadersSM[i]);
    String[]engHeadersWorkers={"ID","Name","Country","City","Street","House Number","ZIP Code","Birthday","Employment Date","Hourly Wage"};
    for (int i=0;i<engHeadersWorkers.length;i++)
    workersTable.getTableHeader().getColumnModel().getColumn(i).setHeaderValue(engHeadersWorkers[i]);
    String[]engHeadersShifts={"Starting Time","Shift Manager ID","Shift Manager Name", "Shift Manager Country", "Shift Manager City" , "Shift Manager Street" , "Shift Manager House Number", "Shift Manager ZIP Code", "Shift Manager Birthday", "Shift Manager Employment Date", "Hourly Wage" , "Extra Wage"};
    for (int i=0;i<engHeadersShifts.length;i++)
    shiftsTable.getTableHeader().getColumnModel().getColumn(i).setHeaderValue(engHeadersShifts[i]);
    String[]engHeadersSlots={"Slot Starting Time","Shift Starting Time","Shift Manager ID","Shift Manager Name", "Shift Manager Country", "Shift Manager City" , "Shift Manager Street" , "Shift Manager House Number", "Shift Manager ZIP Code", "Shift Manager Birthday", "Shift Manager Employment Date", "Hourly Wage" , "Extra Wage","Production Plan - Serial Number", "Production Plan Type - Serial Number", "Production Plan Type - Number of Slots"};
    for (int i=0;i<engHeadersSlots.length;i++)
    slotsTable.getTableHeader().getColumnModel().getColumn(i).setHeaderValue(engHeadersSlots[i]);
    
}

private void hebTableHeaders()
{
    String[]hebHeadersSM={"מספר עובד","שם","מדינה","עיר","רחוב","מספר בית","מיקוד","תאריך לידה","תאריך תחילת ההעסקה","שכר שעתי", "שכר בונוס"};
    for (int i=0;i<hebHeadersSM.length;i++)
    smTable.getTableHeader().getColumnModel().getColumn(i).setHeaderValue(hebHeadersSM[i]);
    String[]hebHeadersWorkers={"מספר עובד","שם","מדינה","עיר","רחוב","מספר בית","מיקוד","תאריך לידה","תאריך תחילת ההעסקה","שכר שעתי"};
    for (int i=0;i<hebHeadersWorkers.length;i++)
    workersTable.getTableHeader().getColumnModel().getColumn(i).setHeaderValue(hebHeadersWorkers[i]);
    String[]hebHeadersShifts={"תחילת המשמרת","מספר מנהל המשמרת","שם מנהל המשמרת", "מדינת מנהל המשמרת", "עיר מנהל המשמרת" , "רחוב מנהל המשמרת" , "מספר בית מנהל המשמרת", "מיקוד מנהל המשמרת", "תאריך הלידה של מנהל המשמרת", "תאריך תחילת ההעסקה של מנהל המשמרת", "שכר שעתי" , "שכר בונוס"};
    for (int i=0;i<hebHeadersShifts.length;i++)
    shiftsTable.getTableHeader().getColumnModel().getColumn(i).setHeaderValue(hebHeadersShifts[i]);
    String[]hebHeadersSlots={"תחילת הסלוט","תחילת המשמרת","מספר מנהל המשמרת","שם מנהל המשמרת", "מדינת מנהל המשמרת", "עיר מנהל המשמרת" , "רחוב מנהל המשמרת" , "מספר בית מנהל המשמרת", "מיקוד מנהל המשמרת", "תאריך הלידה של מנהל המשמרת", "תאריך תחילת ההעסקה של מנהל המשמרת", "שכר שעתי" , "שכר בונוס","תכנית יצור-מספר סידורי", "סוג תכנית יצור-מספר סידורי", "סוג תכנית יצור-מספר סלוטים"};
    for (int i=0;i<hebHeadersSlots.length;i++)
    slotsTable.getTableHeader().getColumnModel().getColumn(i).setHeaderValue(hebHeadersSlots[i]);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportSM;
    private javax.swing.JButton exportShifts;
    private javax.swing.JButton exportSlots;
    private javax.swing.JButton exportWorkers;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane resTableScrollPane;
    private javax.swing.JScrollPane resTableScrollPane1;
    private javax.swing.JScrollPane resTableScrollPane2;
    private javax.swing.JScrollPane resTableScrollPane3;
    private javax.swing.JLabel shiftsLabel;
    private javax.swing.JLayeredPane shiftsLayeredPane;
    private javax.swing.JTable shiftsTable;
    private javax.swing.JLabel slotsLabel;
    private javax.swing.JLayeredPane slotsLayeredPane;
    private javax.swing.JTable slotsTable;
    private javax.swing.JLabel smLabel;
    private javax.swing.JLayeredPane smLayeredPane;
    private javax.swing.JTable smTable;
    private javax.swing.JLayeredPane tableLayeredPane;
    private javax.swing.JLayeredPane workerLayeredPane;
    private javax.swing.JLabel workersLabel;
    private javax.swing.JTable workersTable;
    // End of variables declaration//GEN-END:variables
}
