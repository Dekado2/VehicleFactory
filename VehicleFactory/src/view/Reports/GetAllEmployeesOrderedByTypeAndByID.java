/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.Reports;

import java.awt.event.KeyEvent;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import view.InputCheck;
import view.UserMenu;
import view.ViewLogic;

/**
 *
 *
 */
public class GetAllEmployeesOrderedByTypeAndByID extends javax.swing.JInternalFrame {
    private static ViewLogic view;
    private UserMenu um;
    /**
     * Creates new form GetAllWarehousesInManufacturerCountry
     */
    public GetAllEmployeesOrderedByTypeAndByID() {
        initComponents();
        view=ViewLogic.getInstance();
        ClearTableRows();
        view.GetAllEmployeesOrderedByTypeAndByIDQueryRun(guardTable,smTable,workersTable, tableLayeredPane,guardsLayeredPane,smLayeredPane,workerLayeredPane,um.getLanguageComboBox());
    }

    public GetAllEmployeesOrderedByTypeAndByID(UserMenu um) {
        initComponents();
        view=ViewLogic.getInstance();
        ClearTableRows();
        view.GetAllEmployeesOrderedByTypeAndByIDQueryRun(guardTable,smTable,workersTable, tableLayeredPane,guardsLayeredPane,smLayeredPane,workerLayeredPane,um.getLanguageComboBox());
        this.um=um;
        languageOpening();
         um.getLanguageComboBox().addActionListener(new java.awt.event.ActionListener(){
         public void actionPerformed(java.awt.event.ActionEvent evt) {
             languageActionPerformed(evt);
         }
  });
          
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the
     * Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tableLayeredPane = new javax.swing.JLayeredPane();
        smLayeredPane = new javax.swing.JLayeredPane();
        smLabel = new javax.swing.JLabel();
        resTableScrollPane = new javax.swing.JScrollPane();
        smTable = new javax.swing.JTable();
        exportSM = new javax.swing.JButton();
        guardsLayeredPane = new javax.swing.JLayeredPane();
        resTableScrollPane2 = new javax.swing.JScrollPane();
        guardTable = new javax.swing.JTable();
        guardLabel = new javax.swing.JLabel();
        exportGuards = new javax.swing.JButton();
        workerLayeredPane = new javax.swing.JLayeredPane();
        workersLabel = new javax.swing.JLabel();
        resTableScrollPane1 = new javax.swing.JScrollPane();
        workersTable = new javax.swing.JTable();
        exportWorkers = new javax.swing.JButton();

        setBackground(new java.awt.Color(235, 255, 255));
        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        smLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        smLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("view/Reports/Bundle"); // NOI18N
        smLabel.setText(bundle.getString("GetAllEmployeesOrderedByTypeAndByID.smLabel.text")); // NOI18N

        smTable.setAutoCreateRowSorter(true);
        smTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Country", "City", "Street", "House Number", "ZIP Code", "Birthday", "Employment Date", "Hourly Wage", "Extra Wage"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        smTable.getTableHeader().setReorderingAllowed(false);
        resTableScrollPane.setViewportView(smTable);

        exportSM.setText(bundle.getString("GetAllEmployeesOrderedByTypeAndByID.exportSM.text")); // NOI18N
        exportSM.setToolTipText(bundle.getString("GetAllEmployeesOrderedByTypeAndByID.exportSM.toolTipText")); // NOI18N
        exportSM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportSMActionPerformed(evt);
            }
        });
        exportSM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                exportSMKeyPressed(evt);
            }
        });

        smLayeredPane.setLayer(smLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        smLayeredPane.setLayer(resTableScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        smLayeredPane.setLayer(exportSM, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout smLayeredPaneLayout = new javax.swing.GroupLayout(smLayeredPane);
        smLayeredPane.setLayout(smLayeredPaneLayout);
        smLayeredPaneLayout.setHorizontalGroup(
            smLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(smLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(smLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1013, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(smLayeredPaneLayout.createSequentialGroup()
                        .addComponent(exportSM)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(smLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 681, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        smLayeredPaneLayout.setVerticalGroup(
            smLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(smLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(smLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(smLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportSM))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        guardTable.setAutoCreateRowSorter(true);
        guardTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Country", "City", "Street", "House Number", "ZIP Code", "Birthday", "Employment Date", "Monthly Salary", "Warehouse Number", "Warehouse Country", "Warehouse City", "Warehouse Street", "Warehouse House Number", "Warehouse ZIP Code", "Max Parts Stored", "Max Vehicles Stored", "Current Number of Parts"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        guardTable.getTableHeader().setReorderingAllowed(false);
        resTableScrollPane2.setViewportView(guardTable);

        guardLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        guardLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        guardLabel.setText(bundle.getString("GetAllEmployeesOrderedByTypeAndByID.guardLabel.text")); // NOI18N

        exportGuards.setText(bundle.getString("GetAllEmployeesOrderedByTypeAndByID.exportGuards.text")); // NOI18N
        exportGuards.setToolTipText(bundle.getString("GetAllEmployeesOrderedByTypeAndByID.exportGuards.toolTipText")); // NOI18N
        exportGuards.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportGuardsActionPerformed(evt);
            }
        });
        exportGuards.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                exportGuardsKeyPressed(evt);
            }
        });

        guardsLayeredPane.setLayer(resTableScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        guardsLayeredPane.setLayer(guardLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        guardsLayeredPane.setLayer(exportGuards, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout guardsLayeredPaneLayout = new javax.swing.GroupLayout(guardsLayeredPane);
        guardsLayeredPane.setLayout(guardsLayeredPaneLayout);
        guardsLayeredPaneLayout.setHorizontalGroup(
            guardsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guardsLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(guardsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resTableScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1014, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(guardsLayeredPaneLayout.createSequentialGroup()
                        .addComponent(exportGuards)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guardLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 754, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        guardsLayeredPaneLayout.setVerticalGroup(
            guardsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guardsLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(guardsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportGuards))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resTableScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        workersLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        workersLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        workersLabel.setText(bundle.getString("GetAllEmployeesOrderedByTypeAndByID.workersLabel.text")); // NOI18N

        workersTable.setAutoCreateRowSorter(true);
        workersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Country", "City", "Street", "House Number", "ZIP Code", "Birthday", "Employment Date", "Hourly Wage"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workersTable.getTableHeader().setReorderingAllowed(false);
        resTableScrollPane1.setViewportView(workersTable);

        exportWorkers.setText(bundle.getString("GetAllEmployeesOrderedByTypeAndByID.exportWorkers.text")); // NOI18N
        exportWorkers.setToolTipText(bundle.getString("GetAllEmployeesOrderedByTypeAndByID.exportWorkers.toolTipText")); // NOI18N
        exportWorkers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportWorkersActionPerformed(evt);
            }
        });

        workerLayeredPane.setLayer(workersLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        workerLayeredPane.setLayer(resTableScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        workerLayeredPane.setLayer(exportWorkers, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout workerLayeredPaneLayout = new javax.swing.GroupLayout(workerLayeredPane);
        workerLayeredPane.setLayout(workerLayeredPaneLayout);
        workerLayeredPaneLayout.setHorizontalGroup(
            workerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workerLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(workerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resTableScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1014, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(workerLayeredPaneLayout.createSequentialGroup()
                        .addComponent(exportWorkers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(workersLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 725, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        workerLayeredPaneLayout.setVerticalGroup(
            workerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workerLayeredPaneLayout.createSequentialGroup()
                .addGroup(workerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(workersLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportWorkers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resTableScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        tableLayeredPane.setLayer(smLayeredPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tableLayeredPane.setLayer(guardsLayeredPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tableLayeredPane.setLayer(workerLayeredPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout tableLayeredPaneLayout = new javax.swing.GroupLayout(tableLayeredPane);
        tableLayeredPane.setLayout(tableLayeredPaneLayout);
        tableLayeredPaneLayout.setHorizontalGroup(
            tableLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tableLayeredPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(tableLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(workerLayeredPane)
                    .addComponent(guardsLayeredPane, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(smLayeredPane, javax.swing.GroupLayout.Alignment.LEADING)))
        );
        tableLayeredPaneLayout.setVerticalGroup(
            tableLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tableLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(guardsLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(smLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(workerLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(tableLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 816, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1047, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exportGuardsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportGuardsActionPerformed
        try {
            view.writeCSVfile(guardTable, "GetAllEmployeesorderedByTypeAndByID", "Guards");
            view.ExportSuccess("GetAllEmployeesorderedByTypeAndByID", "Guards",um.getLanguageComboBox());
        } catch (IOException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        } catch (ClassNotFoundException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        } catch (SQLException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        }
    }//GEN-LAST:event_exportGuardsActionPerformed

    private void exportGuardsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_exportGuardsKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_exportGuardsKeyPressed

    private void exportSMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportSMActionPerformed
       try {
            view.writeCSVfile(smTable, "GetAllEmployeesorderedByTypeAndByID", "ShiftManagers");
            view.ExportSuccess("GetAllEmployeesorderedByTypeAndByID", "ShiftManagers",um.getLanguageComboBox());
        } catch (IOException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        } catch (ClassNotFoundException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        } catch (SQLException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        }
    }//GEN-LAST:event_exportSMActionPerformed

    private void exportSMKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_exportSMKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_exportSMKeyPressed

    private void exportWorkersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportWorkersActionPerformed
        try {
            view.writeCSVfile(workersTable, "GetAllEmployeesorderedByTypeAndByID", "Workers");
            view.ExportSuccess("GetAllEmployeesorderedByTypeAndByID", "Workers",um.getLanguageComboBox());
        } catch (IOException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        } catch (ClassNotFoundException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        } catch (SQLException ex) {
            view.ExportFailed(um.getLanguageComboBox());
        }
    }//GEN-LAST:event_exportWorkersActionPerformed

    /**
     * @param args the command line arguments
     */
private void ClearTableRows()
{
    DefaultTableModel dm = (DefaultTableModel) smTable.getModel();
        int rowCount = dm.getRowCount();
        for (int i=rowCount-1; i>=0 ; i--)
            dm.removeRow(i);
         DefaultTableModel dmTwo = (DefaultTableModel) workersTable.getModel();
        int rowCountTwo = dmTwo.getRowCount();
        for (int i=rowCountTwo-1; i>=0 ; i--)
            dmTwo.removeRow(i);
         DefaultTableModel dmThree = (DefaultTableModel) guardTable.getModel();
        int rowCountThree = dmThree.getRowCount();
        for (int i=rowCountThree-1; i>=0 ; i--)
            dmThree.removeRow(i);
}
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GetAllEmployeesOrderedByTypeAndByID.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GetAllEmployeesOrderedByTypeAndByID.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GetAllEmployeesOrderedByTypeAndByID.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GetAllEmployeesOrderedByTypeAndByID.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GetAllEmployeesOrderedByTypeAndByID().setVisible(true);
               
            }
        });
    }

    private void languageOpening()
{
    if (um.getLanguageComboBox().getSelectedItem().equals("עברית"))
              {
                  Locale l = new Locale("iw", "IL");
                  ResourceBundle r = ResourceBundle.getBundle("view.Reports/Bundle",l);
                  guardLabel.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.guardLabel.text"));
                  exportGuards.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportGuards.text"));
                  exportSM.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportSM.text"));
                  exportWorkers.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportWorkers.text"));
                  exportWorkers.setToolTipText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportWorkers.toolTipText"));
                  exportSM.setToolTipText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportSM.toolTipText"));
                  exportGuards.setToolTipText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportGuards.toolTipText"));
                  smLabel.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.smLabel.text"));
                  workersLabel.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.workersLabel.text"));
                  hebTableHeaders();
              }
             else if (um.getLanguageComboBox().getSelectedItem().equals("English") || um.getLanguageComboBox().getSelectedItem().equals("Choose a language"))
              {
                  Locale l = new Locale("en", "US");
                  ResourceBundle r = ResourceBundle.getBundle("view.Reports/Bundle",l);
                  guardLabel.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.guardLabel.text"));
                  exportGuards.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportGuards.text"));
                  exportSM.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportSM.text"));
                  exportWorkers.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportWorkers.text"));
                  exportWorkers.setToolTipText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportWorkers.toolTipText"));
                  exportSM.setToolTipText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportSM.toolTipText"));
                  exportGuards.setToolTipText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportGuards.toolTipText"));
                  smLabel.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.smLabel.text"));
                  workersLabel.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.workersLabel.text"));
                  engTableHeaders();
              }
}
    
    private void languageActionPerformed(java.awt.event.ActionEvent evt) {  
     if (um.getLanguageComboBox().getSelectedItem().equals("עברית"))
              {
                  Locale l = new Locale("iw", "IL");
                  ResourceBundle r = ResourceBundle.getBundle("view.Reports/Bundle",l);
                  guardLabel.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.guardLabel.text"));
                  exportGuards.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportGuards.text"));
                  exportSM.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportSM.text"));
                  exportWorkers.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportWorkers.text"));
                  exportWorkers.setToolTipText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportWorkers.toolTipText"));
                  exportSM.setToolTipText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportSM.toolTipText"));
                  exportGuards.setToolTipText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportGuards.toolTipText"));
                  smLabel.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.smLabel.text"));
                  workersLabel.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.workersLabel.text"));
                  hebTableHeaders();
                  ClearTableRows();
        view.GetAllEmployeesOrderedByTypeAndByIDQueryRun(guardTable,smTable,workersTable, tableLayeredPane,guardsLayeredPane,smLayeredPane,workerLayeredPane,um.getLanguageComboBox());
        this.setTitle("השג את כל העובדים ממויינים לפי סוג ולפי מספר עובד");
              }
             else if (um.getLanguageComboBox().getSelectedItem().equals("English") || um.getLanguageComboBox().getSelectedItem().equals("Choose a language"))
              {
                  Locale l = new Locale("en", "US");
                  ResourceBundle r = ResourceBundle.getBundle("view.Reports/Bundle",l);
                  guardLabel.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.guardLabel.text"));
                  exportGuards.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportGuards.text"));
                  exportSM.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportSM.text"));
                  exportWorkers.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportWorkers.text"));
                  exportWorkers.setToolTipText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportWorkers.toolTipText"));
                  exportSM.setToolTipText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportSM.toolTipText"));
                  exportGuards.setToolTipText(r.getString("GetAllEmployeesOrderedByTypeAndByID.exportGuards.toolTipText"));
                  smLabel.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.smLabel.text"));
                  workersLabel.setText(r.getString("GetAllEmployeesOrderedByTypeAndByID.workersLabel.text"));
                  engTableHeaders();
                  ClearTableRows();
        view.GetAllEmployeesOrderedByTypeAndByIDQueryRun(guardTable,smTable,workersTable, tableLayeredPane,guardsLayeredPane,smLayeredPane,workerLayeredPane,um.getLanguageComboBox());
        this.setTitle("Get All Employees Ordered By Type and By ID");
              }
}
    
    private void engTableHeaders()
{
    String[]engHeadersGuards={"ID","Name","Country","City","Street","House Number","ZIP Code","Birthday","Employment Date","Monthly Salary","Warehouse Number","Warehouse Country","Warehouse City","Warehouse Street","Warehouse House Number","Warehouse ZIP Code","Max Parts Stored","Max Vehicles Stored","Current Number of Parts"};
    for (int i=0;i<engHeadersGuards.length;i++)
    guardTable.getTableHeader().getColumnModel().getColumn(i).setHeaderValue(engHeadersGuards[i]);
    String[]engHeadersSM={"ID","Name","Country","City","Street","House Number","ZIP Code","Birthday","Employment Date","Hourly Wage", "Extra Wage"};
    for (int i=0;i<engHeadersSM.length;i++)
    smTable.getTableHeader().getColumnModel().getColumn(i).setHeaderValue(engHeadersSM[i]);
    String[]engHeadersWorkers={"ID","Name","Country","City","Street","House Number","ZIP Code","Birthday","Employment Date","Hourly Wage"};
    for (int i=0;i<engHeadersWorkers.length;i++)
    workersTable.getTableHeader().getColumnModel().getColumn(i).setHeaderValue(engHeadersWorkers[i]);
    
}

    private void hebTableHeaders()
{
    String[]hebHeadersGuards={"מספר עובד","שם","מדינה","עיר","רחוב","מספר בית","מיקוד","תאריך לידה","תאריך תחילת ההעסקה","שכר חודשי","מספר מחסן","מדינה", "עיר" , "רחוב" , "מספר בית", "מיקוד", "מכסת חלקים לאחסון", "מכסת רכבים לאחסון", "כמות החלקים הנוכחית"};
    for (int i=0;i<hebHeadersGuards.length;i++)
    guardTable.getTableHeader().getColumnModel().getColumn(i).setHeaderValue(hebHeadersGuards[i]);
    String[]hebHeadersSM={"מספר עובד","שם","מדינה","עיר","רחוב","מספר בית","מיקוד","תאריך לידה","תאריך תחילת ההעסקה","שכר שעתי", "שכר בונוס"};
    for (int i=0;i<hebHeadersSM.length;i++)
    smTable.getTableHeader().getColumnModel().getColumn(i).setHeaderValue(hebHeadersSM[i]);
    String[]hebHeadersWorkers={"מספר עובד","שם","מדינה","עיר","רחוב","מספר בית","מיקוד","תאריך לידה","תאריך תחילת ההעסקה","שכר שעתי"};
    for (int i=0;i<hebHeadersWorkers.length;i++)
    workersTable.getTableHeader().getColumnModel().getColumn(i).setHeaderValue(hebHeadersWorkers[i]);
}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportGuards;
    private javax.swing.JButton exportSM;
    private javax.swing.JButton exportWorkers;
    private javax.swing.JLabel guardLabel;
    private javax.swing.JTable guardTable;
    private javax.swing.JLayeredPane guardsLayeredPane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane resTableScrollPane;
    private javax.swing.JScrollPane resTableScrollPane1;
    private javax.swing.JScrollPane resTableScrollPane2;
    private javax.swing.JLabel smLabel;
    private javax.swing.JLayeredPane smLayeredPane;
    private javax.swing.JTable smTable;
    private javax.swing.JLayeredPane tableLayeredPane;
    private javax.swing.JLayeredPane workerLayeredPane;
    private javax.swing.JLabel workersLabel;
    private javax.swing.JTable workersTable;
    // End of variables declaration//GEN-END:variables
}
