/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.MyPanels.show;

import java.awt.Toolkit;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import view.UserMenu;
import view.ViewLogic;

/**
 *
 *
 */
public class ShowEmployees extends javax.swing.JPanel {
private static ViewLogic view;
private UserMenu um;
    /**
     * Creates new form ShowEmployees
     */
    public ShowEmployees(UserMenu um) {
        initComponents();
        view=ViewLogic.getInstance();
        this.um=um;
        view.ShowDataEmployees(guardTable,smTable,workersTable,um.getLanguageComboBox());
        more.setVisible(false);
        more.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the
     * Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableLayeredPane = new javax.swing.JLayeredPane();
        smLayeredPane = new javax.swing.JLayeredPane();
        smLabel = new javax.swing.JLabel();
        resTableScrollPane = new javax.swing.JScrollPane();
        smTable = new javax.swing.JTable();
        guardsLayeredPane = new javax.swing.JLayeredPane();
        resTableScrollPane2 = new javax.swing.JScrollPane();
        guardTable = new javax.swing.JTable();
        guardLabel = new javax.swing.JLabel();
        workerLayeredPane = new javax.swing.JLayeredPane();
        workersLabel = new javax.swing.JLabel();
        resTableScrollPane1 = new javax.swing.JScrollPane();
        workersTable = new javax.swing.JTable();
        remove = new javax.swing.JButton();
        update = new javax.swing.JButton();
        more = new javax.swing.JButton();

        setBackground(new java.awt.Color(235, 255, 255));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        smLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        smLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("view/MyPanels/show/Bundle"); // NOI18N
        smLabel.setText(bundle.getString("ShowEmployees.smLabel.text")); // NOI18N

        smTable.setAutoCreateRowSorter(true);
        smTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Country", "City", "Street", "House Number", "ZIP Code", "Birthday", "Employment Date", "Hourly Wage", "Extra Wage"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        smTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                try{
                    smTable.getValueAt(smTable.getSelectedRow(), 0);
                    workersTable.getSelectionModel().clearSelection();
                    guardTable.getSelectionModel().clearSelection();
                    more.setVisible(false);
                    more.setEnabled(false);
                }
                catch (IndexOutOfBoundsException e){

                }
            }
        });
        smTable.setSelectionBackground(new java.awt.Color(76, 188, 188));
        smTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        smTable.getTableHeader().setReorderingAllowed(false);
        resTableScrollPane.setViewportView(smTable);

        smLayeredPane.setLayer(smLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        smLayeredPane.setLayer(resTableScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout smLayeredPaneLayout = new javax.swing.GroupLayout(smLayeredPane);
        smLayeredPane.setLayout(smLayeredPaneLayout);
        smLayeredPaneLayout.setHorizontalGroup(
            smLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(smLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(smLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 789, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(smLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 780, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        smLayeredPaneLayout.setVerticalGroup(
            smLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(smLayeredPaneLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(smLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        guardTable.setAutoCreateRowSorter(true);
        guardTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Country", "City", "Street", "House Number", "ZIP Code", "Birthday", "Employment Date", "Monthly Salary", "Warehouse Number", "Warehouse Country", "Warehouse City", "Warehouse Street", "Warehouse House Number", "Warehouse ZIP Code", "Max Parts Stored", "Max Vehicles Stored", "Current Number of Parts"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        guardTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                try{
                    guardTable.getValueAt(guardTable.getSelectedRow(), 0);
                    workersTable.getSelectionModel().clearSelection();
                    smTable.getSelectionModel().clearSelection();
                    more.setVisible(false);
                    more.setEnabled(false);
                }
                catch (IndexOutOfBoundsException e){

                }
            }
        });
        guardTable.setSelectionBackground(new java.awt.Color(76, 188, 188));
        guardTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        guardTable.getTableHeader().setReorderingAllowed(false);
        resTableScrollPane2.setViewportView(guardTable);

        guardLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        guardLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        guardLabel.setText(bundle.getString("ShowEmployees.guardLabel.text")); // NOI18N

        guardsLayeredPane.setLayer(resTableScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        guardsLayeredPane.setLayer(guardLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout guardsLayeredPaneLayout = new javax.swing.GroupLayout(guardsLayeredPane);
        guardsLayeredPane.setLayout(guardsLayeredPaneLayout);
        guardsLayeredPaneLayout.setHorizontalGroup(
            guardsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(resTableScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 790, Short.MAX_VALUE)
            .addGroup(guardsLayeredPaneLayout.createSequentialGroup()
                .addComponent(guardLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        guardsLayeredPaneLayout.setVerticalGroup(
            guardsLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guardsLayeredPaneLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(guardLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resTableScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        workersLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        workersLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        workersLabel.setText(bundle.getString("ShowEmployees.workersLabel.text")); // NOI18N

        workersTable.setAutoCreateRowSorter(true);
        workersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Country", "City", "Street", "House Number", "ZIP Code", "Birthday", "Employment Date", "Hourly Wage"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workersTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                try{
                    workersTable.getValueAt(workersTable.getSelectedRow(), 0);
                    smTable.getSelectionModel().clearSelection();
                    guardTable.getSelectionModel().clearSelection();
                    more.setVisible(true);
                    more.setEnabled(true);
                }
                catch (IndexOutOfBoundsException e){
                    more.setVisible(false);
                    more.setEnabled(false);
                }
            }
        });
        workersTable.setSelectionBackground(new java.awt.Color(76, 188, 188));
        workersTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        workersTable.getTableHeader().setReorderingAllowed(false);
        resTableScrollPane1.setViewportView(workersTable);

        remove.setBackground(new java.awt.Color(0, 102, 102));
        remove.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        remove.setForeground(new java.awt.Color(255, 255, 255));
        remove.setText(bundle.getString("ShowEmployees.remove.text")); // NOI18N
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        update.setBackground(new java.awt.Color(0, 102, 102));
        update.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        update.setForeground(new java.awt.Color(255, 255, 255));
        update.setText(bundle.getString("ShowEmployees.update.text")); // NOI18N
        update.setToolTipText(bundle.getString("ShowEmployees.update.toolTipText")); // NOI18N

        more.setBackground(new java.awt.Color(0, 102, 102));
        more.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        more.setForeground(new java.awt.Color(255, 255, 255));
        more.setText(bundle.getString("ShowEmployees.more.text")); // NOI18N
        more.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                moreMouseDragged(evt);
            }
        });
        more.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                moreMouseClicked(evt);
            }
        });
        more.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moreActionPerformed(evt);
            }
        });

        workerLayeredPane.setLayer(workersLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        workerLayeredPane.setLayer(resTableScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        workerLayeredPane.setLayer(remove, javax.swing.JLayeredPane.DEFAULT_LAYER);
        workerLayeredPane.setLayer(update, javax.swing.JLayeredPane.DEFAULT_LAYER);
        workerLayeredPane.setLayer(more, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout workerLayeredPaneLayout = new javax.swing.GroupLayout(workerLayeredPane);
        workerLayeredPane.setLayout(workerLayeredPaneLayout);
        workerLayeredPaneLayout.setHorizontalGroup(
            workerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workerLayeredPaneLayout.createSequentialGroup()
                .addGroup(workerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resTableScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 789, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(workersLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 773, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 40, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, workerLayeredPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(update)
                .addGap(155, 155, 155)
                .addComponent(remove)
                .addGap(155, 155, 155)
                .addComponent(more)
                .addGap(91, 91, 91))
        );
        workerLayeredPaneLayout.setVerticalGroup(
            workerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workerLayeredPaneLayout.createSequentialGroup()
                .addComponent(workersLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resTableScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(workerLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(remove)
                    .addComponent(update)
                    .addComponent(more, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tableLayeredPane.setLayer(smLayeredPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tableLayeredPane.setLayer(guardsLayeredPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        tableLayeredPane.setLayer(workerLayeredPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout tableLayeredPaneLayout = new javax.swing.GroupLayout(tableLayeredPane);
        tableLayeredPane.setLayout(tableLayeredPaneLayout);
        tableLayeredPaneLayout.setHorizontalGroup(
            tableLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tableLayeredPaneLayout.createSequentialGroup()
                .addGroup(tableLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tableLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tableLayeredPaneLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(workerLayeredPane))
                        .addComponent(smLayeredPane, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGroup(tableLayeredPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(guardsLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tableLayeredPaneLayout.setVerticalGroup(
            tableLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tableLayeredPaneLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(guardsLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(smLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(workerLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(tableLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        view.ShowDataEmployees(guardTable,smTable,workersTable,um.getLanguageComboBox());
    }//GEN-LAST:event_formComponentShown

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        boolean bool=false;
        if (guardTable.getSelectedRow()==-1 && smTable.getSelectedRow()==-1 && workersTable.getSelectedRow()==-1){
             Toolkit.getDefaultToolkit().beep();
            if (um.getLanguageComboBox().getSelectedItem().equals("English") || um.getLanguageComboBox().getSelectedItem().equals("Choose a language"))
            JOptionPane.showMessageDialog(null, "You must select an employee from a table!");
            else if (um.getLanguageComboBox().getSelectedItem().equals("עברית"))
                JOptionPane.showMessageDialog(null, "עליך לבחור עובד מאחת הטבלאות!");
        }
        else if (guardTable.getSelectedRow()!=-1 && smTable.getSelectedRow()==-1 && workersTable.getSelectedRow()==-1)
        {
            Object[] options = {"Yes","No"};
            Object[] hebOptions = {"כן","לא"};
            int n=0;
            if (um.getLanguageComboBox().getSelectedItem().equals("English") || um.getLanguageComboBox().getSelectedItem().equals("Choose a language"))
              n = JOptionPane.showOptionDialog(null, "Are you sure you want to proceed?","Removing confirmation",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE,null,options,options[1]);
            else if (um.getLanguageComboBox().getSelectedItem().equals("עברית"))
              n = JOptionPane.showOptionDialog(null, "האם אתה בטוח שברצונך להמשיך?","אימות הסרה",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE,null,hebOptions,hebOptions[1]);    
            if (n==0)
              {
             bool=view.controller.removeEmployee(guardTable.getValueAt(guardTable.getSelectedRow(), 0).toString());
              if (bool==true)
              {
                  Toolkit.getDefaultToolkit().beep();
                  if (um.getLanguageComboBox().getSelectedItem().equals("English") || um.getLanguageComboBox().getSelectedItem().equals("Choose a language"))
                  JOptionPane.showMessageDialog(null, "Guard removed successfully!");
                  else if (um.getLanguageComboBox().getSelectedItem().equals("עברית"))
                  JOptionPane.showMessageDialog(null, "השומר הוסר בהצלחה!");    
                  view.ShowDataEmployees(guardTable,smTable,workersTable,um.getLanguageComboBox());
              }
              else{
                  Toolkit.getDefaultToolkit().beep();
                  if (um.getLanguageComboBox().getSelectedItem().equals("English") || um.getLanguageComboBox().getSelectedItem().equals("Choose a language"))
                  JOptionPane.showMessageDialog(null, "Guard was not removed!");
                  else if (um.getLanguageComboBox().getSelectedItem().equals("עברית"))
                  JOptionPane.showMessageDialog(null, "השומר לא הוסר");
              }
              }
        }
        else if (guardTable.getSelectedRow()==-1 && smTable.getSelectedRow()!=-1 && workersTable.getSelectedRow()==-1)
        {
            Object[] options = {"Yes","No"};
            Object[] hebOptions = {"כן","לא"};
            int n=0;
            if (um.getLanguageComboBox().getSelectedItem().equals("English") || um.getLanguageComboBox().getSelectedItem().equals("Choose a language"))
              n = JOptionPane.showOptionDialog(null, "Are you sure you want to proceed?","Removing confirmation",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE,null,options,options[1]);
             else if (um.getLanguageComboBox().getSelectedItem().equals("עברית")) 
               n = JOptionPane.showOptionDialog(null, "האם אתה בטוח שברצונך להמשיך?","אימות הסרה",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE,null,hebOptions,hebOptions[1]);  
                 if (n==0)
              {
             bool=view.controller.removeEmployee(smTable.getValueAt(smTable.getSelectedRow(), 0).toString());
              if (bool==true)
              {
                  Toolkit.getDefaultToolkit().beep();
                  if (um.getLanguageComboBox().getSelectedItem().equals("English") || um.getLanguageComboBox().getSelectedItem().equals("Choose a language"))
                  JOptionPane.showMessageDialog(null, "Shift Manager removed successfully!");
                  else if (um.getLanguageComboBox().getSelectedItem().equals("עברית"))
                  JOptionPane.showMessageDialog(null, "מנהל המשמרת הוסר בהצלחה!");
                  view.ShowDataEmployees(guardTable,smTable,workersTable,um.getLanguageComboBox());
              }
              else{
                  Toolkit.getDefaultToolkit().beep();
                  if (um.getLanguageComboBox().getSelectedItem().equals("English") || um.getLanguageComboBox().getSelectedItem().equals("Choose a language"))
                  JOptionPane.showMessageDialog(null, "Shift Manager was not removed!\n  Please remove his shifts first!");
                  else if (um.getLanguageComboBox().getSelectedItem().equals("עברית"))
                  JOptionPane.showMessageDialog(null, "מנהל המשמרת לא הוסר!   \n אנא הסר קודם את משמרותיו!");
              }
              }
        }
        else if (guardTable.getSelectedRow()==-1 && smTable.getSelectedRow()==-1 && workersTable.getSelectedRow()!=-1)
        {
            Object[] options = {"Yes","No"};
            Object[] hebOptions = {"כן","לא"};
            int n=0;
            if (um.getLanguageComboBox().getSelectedItem().equals("English") || um.getLanguageComboBox().getSelectedItem().equals("Choose a language"))
                 n = JOptionPane.showOptionDialog(null, "Are you sure you want to proceed?","Removing confirmation",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE,null,options,options[1]);
            else if (um.getLanguageComboBox().getSelectedItem().equals("עברית")) 
               n = JOptionPane.showOptionDialog(null, "האם אתה בטוח שברצונך להמשיך?","אימות הסרה",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE,null,hebOptions,hebOptions[1]);  
               
              if (n==0)
              {
             bool=view.controller.removeEmployee(workersTable.getValueAt(workersTable.getSelectedRow(), 0).toString());
              if (bool==true)
              {
                  Toolkit.getDefaultToolkit().beep();
                  if (um.getLanguageComboBox().getSelectedItem().equals("English") || um.getLanguageComboBox().getSelectedItem().equals("Choose a language"))
                  JOptionPane.showMessageDialog(null, "Worker removed successfully!");
                  else if (um.getLanguageComboBox().getSelectedItem().equals("עברית"))
                  JOptionPane.showMessageDialog(null, "העובד הוסר בהצלחה!");
                  view.ShowDataEmployees(guardTable,smTable,workersTable,um.getLanguageComboBox());
              }
              else{
                  Toolkit.getDefaultToolkit().beep();
                  if (um.getLanguageComboBox().getSelectedItem().equals("English") || um.getLanguageComboBox().getSelectedItem().equals("Choose a language"))
                  JOptionPane.showMessageDialog(null, "    Worker was not removed!\n Please remove his shifts first!");
                  else if (um.getLanguageComboBox().getSelectedItem().equals("עברית"))
                  JOptionPane.showMessageDialog(null, "העובד לא הוסר!           \n אנא הסר קודם את משמרותיו!");    
              }
              }
        }
        else if ((guardTable.getSelectedRow()!=-1 && smTable.getSelectedRow()!=-1 && workersTable.getSelectedRow()!=-1) || (guardTable.getSelectedRow()==-1 && smTable.getSelectedRow()!=-1 && workersTable.getSelectedRow()!=-1) || (guardTable.getSelectedRow()!=-1 && smTable.getSelectedRow()==-1 && workersTable.getSelectedRow()!=-1) || (guardTable.getSelectedRow()!=-1 && smTable.getSelectedRow()!=-1 && workersTable.getSelectedRow()==-1)){
            Toolkit.getDefaultToolkit().beep();
                  if (um.getLanguageComboBox().getSelectedItem().equals("English") || um.getLanguageComboBox().getSelectedItem().equals("Choose a language"))
            JOptionPane.showMessageDialog(null, "You may only select one employee at a time!");
                  else if (um.getLanguageComboBox().getSelectedItem().equals("עברית"))
                      JOptionPane.showMessageDialog(null, "עליך לבחור רק עובד אחד!");
        }
    }//GEN-LAST:event_removeActionPerformed

    private void moreMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moreMouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_moreMouseDragged

    private void moreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moreActionPerformed

    private void moreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moreMouseClicked
       
    }//GEN-LAST:event_moreMouseClicked
    public JButton getMore(){
        return more;
    }
    public JTable getGuardTable() {
        return guardTable;
    }

    public JTable getSmTable() {
        return smTable;
    }

    public JButton getUpdate() {
        return update;
    }

    public JTable getWorkersTable() {
        return workersTable;
    }

    public JLabel getGuardLabel() {
        return guardLabel;
    }

    public JButton getRemove() {
        return remove;
    }

    public JLabel getSmLabel() {
        return smLabel;
    }

    public JLabel getWorkersLabel() {
        return workersLabel;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel guardLabel;
    private javax.swing.JTable guardTable;
    private javax.swing.JLayeredPane guardsLayeredPane;
    private javax.swing.JButton more;
    private javax.swing.JButton remove;
    private javax.swing.JScrollPane resTableScrollPane;
    private javax.swing.JScrollPane resTableScrollPane1;
    private javax.swing.JScrollPane resTableScrollPane2;
    private javax.swing.JLabel smLabel;
    private javax.swing.JLayeredPane smLayeredPane;
    private javax.swing.JTable smTable;
    private javax.swing.JLayeredPane tableLayeredPane;
    private javax.swing.JButton update;
    private javax.swing.JLayeredPane workerLayeredPane;
    private javax.swing.JLabel workersLabel;
    private javax.swing.JTable workersTable;
    // End of variables declaration//GEN-END:variables
}
